To generate visualizations of events for each window, you can modify the `process_events` function in your script to include visualizing and saving each event window before it's fed into the network for reconstruction.

Here is an example of how you could modify your code:

```python
from matplotlib import pyplot as plt

def process_events(args):
    # ... Existing code ...

    for event_window in event_window_iterator:
        # Check if event_window is empty
        if event_window.size == 0:
            break

        last_timestamp = event_window[-1, 0]

        # Visualize events in the window
        plt.figure(figsize=(10, 10))
        plt.scatter(event_window[:, 1], event_window[:, 2], c=event_window[:, 0], marker='.', cmap='viridis')
        plt.title('Events within the window')
        plt.xlim(0, width)
        plt.ylim(height, 0)  # Flip y-axis to match image coordinates
        plt.colorbar(label='Timestamp')
        plt.savefig(f'{output_folder}/events_{last_timestamp}.png')  # Save the figure
        plt.close()

        with Timer('Building event tensor'):
            # ... Existing code ...
```

In this code, we use Matplotlib to create a scatter plot of the events. Each event is plotted at its (x, y) spatial coordinates, and the color of each point corresponds to the timestamp of the event. The scatter plot is then saved as a PNG image in the output folder. The filename includes the timestamp of the last event in the window for reference. 

This will allow you to visualize the distribution of events within each window before they are passed to the model for reconstruction.